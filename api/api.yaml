openapi: 3.1.0
info:
  title: Track Your Regions API
  version: 0.0.1
  contact:
    name: Uncovering World Support
    url: https://uncovering.world
    email: info@uncovering.world
  description: |
    The Track Your Regions API provides access to the region data used by the Uncovering World platform.
    It gives access to the regions (and related information) and to the other data that is stored in the platform.
    The API is currently in development and not yet available for public use.

servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://api.uncovering.world
    description: Production server, not yet available

tags:
  - name: regions
    description: Operations related to regions and divisions
  - name: hierarchy
    description: Operations related to hierarchies
  - name: geometry
    description: Operations related to region geometry

paths:

  # Region endpoints

  # Retrieve root regions (regions without a parent)
  /regions/root:
    get:
      operationId: getRootRegions
      tags: [regions]
      summary: Retrieve all root regions
      description: |
        Retrieve all root regions for a given hierarchy.
        If no hierarchy is specified, the default hierarchy is used.
      parameters:
        - name: hierarchyId
          in: query
          required: false
          description: |
            The hierarchy to retrieve root regions for.
            If not specified, the default hierarchy is used.
          schema:
            type: integer
      responses:
        '200':
          description: List of root regions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
        '400':
          description: Bad request, most likely due to an invalid hierarchy ID

  # Retrieve information about a specific region (root or subregion)
  /regions/{regionId}:
    get:
      operationId: getRegion
      tags: [regions]
      summary: Retrieve information about a specific region
      description: |
        Retrieve information about a specific region, including its name, parent region, and whether it has subregions.
        If the region is a root region, the parent region is null.
      parameters:
        - name: regionId
          in: path
          required: true
          schema:
            type: integer
        - name: hierarchyId
          in: query
          required: false
          description: |
            The hierarchy to which the region belongs.
            If not specified, the default hierarchy is used.
          schema:
            type: integer
      responses:
        '200':
          description: Region information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '400':
          description: Bad request
        '404':
          description: Region not found


  # Retrieve subregions for a specific region
  /regions/{regionId}/subregions:
    get:
      operationId: getSubregions
      tags: [regions]
      summary: Retrieve subregions for a specific region
      description: |
        Retrieve subregions for a specific region.
        If the region has no subregions, a 204 response is returned.
      parameters:
        - name: regionId
          in: path
          required: true
          schema:
            type: integer
        - name: getAll
          in: query
          required: false
          description: Whether to retrieve all nested subregions or just the immediate subregions.
          schema:
            type: boolean
        - name: hierarchyId
          in: query
          required: false
          description: |
            The hierarchy to which the region belongs.
            If not specified, the default hierarchy is used.
          schema:
            type: integer
      responses:
        '200':
          description: List of subregions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
        '204':
          description: Region has no subregions. No content is returned.
        '400':
          description: Bad request
        '404':
          description: Region not found

  # Retrieve the parent regions for a specific region
  /regions/{regionId}/ancestors:
    get:
      operationId: getRegionAncestors
      tags: [regions]
      summary: Retrieve the parent regions for a specific region
      description: |
        Retrieve the parent regions for a specific region, including the region itself.
        The regions are returned in order, with the root region first and the region itself last.
      parameters:
        - name: regionId
          in: path
          required: true
          schema:
            type: integer
        - name: hierarchyId
          in: query
          required: false
          description: |
            The hierarchy to which the region belongs.
            If not specified, the default hierarchy is used.
          schema:
            type: integer
      responses:
        '200':
          description: List of parent regions, including the region itself, in order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
        '400':
          description: Bad request
        '404':
          description: Region not found

  /regions/{regionId}/geometry:
    get:
      operationId: getRegionGeometry
      tags: [regions, geometry]
      summary: Retrieve the geometry for a specific region
      description: |
        Retrieve the geometry for a specific region.
        If the region has no geometry, the resolution of empty geometries is controlled by the `resolveEmpty`
        query parameter. If `resolveEmpty` is true, the geometry of the region is computed by aggregating the
        geometries of the subregions. If `resolveEmpty` is false, a 204 response is returned.
      parameters:
        - name: regionId
          in: path
          required: true
          schema:
            type: integer
        - name: resolveEmpty
          in: query
          required: false
          description: Whether to resolve empty geometries by aggregating the geometries of the subregions.
          schema:
            type: boolean
        - name: hierarchyId
          in: query
          required: false
          description: |
            The hierarchy to which the region belongs.
            If not specified, the default hierarchy is used.
          schema:
            type: integer
      responses:
        '200':
          description: Geometry of the region, in GeoJSON format, always a MultiPolygon
          content:
            application/json:
              schema:
                type: object
                properties:
                  geometry:
                    $ref: '#/components/schemas/MultiPolygonGeometry'
        '204':
          description: Region has no geometry. No content is returned.
        '400':
          description: Bad request
        '404':
          description: Region not found

  # List the available hierarchies
  /regions/hierarchies:
    get:
      operationId: getHierarchies
      tags: [regions, hierarchy]
      summary: List the available hierarchies
      description: |
        List the available hierarchies.
        The default hierarchy is always included in the list.
      responses:
        '200':
          description: List of available hierarchies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hierarchy'

  # Search for regions by name
  /regions/search:
    get:
      operationId: searchRegions
      tags: [regions]
      summary: Search for regions by name
      description: |
        Search for regions by name.
        The search is case-insensitive and matches partial words.
        The search is performed on the name of the region and all its ancestors.
        The results are ordered by the relevance of the match, with the most relevant match first.
      parameters:
        - name: query
          required: true
          in: query
          schema:
            type: string
        - name: hierarchyId
          in: query
          required: false
          description: |
            The hierarchy to search in.
            If not specified, the default hierarchy is used.
          schema:
            type: integer
      responses:
        '200':
          description: List of regions matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchResult'
        '204':
          description: No regions match the query. No content is returned.
        '400':
          description: Bad request

  /regions/{regionId}/siblings:
    get:
      operationId: getRegionSiblings
      tags: [regions]
      summary: Retrieve the sibling regions for a specific region
      description: |
        Retrieve the sibling regions for a specific region, including the region itself.
      parameters:
        - name: regionId
          in: path
          required: true
          schema:
            type: integer
        - name: hierarchyId
          in: query
          required: false
          description: |
            The hierarchy to which the region belongs.
            If not specified, the default hierarchy is used.
          schema:
            type: integer
      responses:
        '200':
          description: List of sibling regions, including the region itself
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Region'
        '400':
          description: Bad request
        '404':
          description: Region not found

# Shared components

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
  schemas:
    Region:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        parentRegionId:
          type: integer
        hasSubregions:
          type: boolean

    SearchResult:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        path:
          type: string
          description: A ' > ' delimited string representing the hierarchical path of the region.

    CRS:
      type: object
      properties:
        type:
          type: string
          enum: [ name ]
          description: Type of CRS; here, 'name' refers to a named CRS.
        properties:
          type: object
          properties:
            name:
              type: string
              description: Name of the CRS used; typically an EPSG code.
              example: "EPSG:4326"

    Coordinate:
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number
        format: double
      description: A longitude and latitude pair.

    LinearRing:
      type: array
      items:
        $ref: '#/components/schemas/Coordinate'
      description: A closed LineString, with four or more positions. The first and last positions are equivalent (they represent the same point).

    Polygon:
      type: array
      items:
        $ref: '#/components/schemas/LinearRing'
      description: An array of LinearRings where the first element is the outer boundary and any subsequent elements are inner boundaries (holes).

    MultiPolygonGeometry:
      type: object
      properties:
        type:
          type: string
          enum: [ MultiPolygon ]
          description: Type of the geometry; for this API, always 'MultiPolygon'.
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Polygon'
          description: An array of Polygons that make up the MultiPolygon.
        crs:
          $ref: '#/components/schemas/CRS'
        description: A GeoJSON object representing the geometry of the region as a MultiPolygon.

    Hierarchy:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
